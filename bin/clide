#!/usr/bin/env ruby
# vim: fdm=marker

require 'optparse'
require 'yaml'

require_relative '../lib/config'
require_relative '../lib/project'

# Top level command to manage a maven java project from the command line.

# {{{
class Clide
  attr_accessor :conf, :projects

  def initialize
    @conf = ClideConfig.new
    @plugins  = {}
    @commands = {}
  end

  def self.is_command_registered?(cmdname)
    @commands.key? cmdname
  end

  # {{{
  def generate_classpaths(artifacts = nil)
    # generate the classpath for each module
    @conf[:modules].each_key { |mod|
      cpathfile = @conf[:clide_conf_dir] + mod + @conf[:module][:classpath]

      classpath = Set.new
      artifacts.each { |dep_coordinate|
        classpath << @pom.dependencies[:all][dep_coordinate].get_path_to_dep
      }
    }
    @conf[:classpath][:file].open('w+') { |file| 
      file.write @conf[:classpath]
    }
  end
  #}}}

  def save
    @conf.save
  end

  ##
  # Initialize/Update clide by parsing the pom and storing the data in the .clide directory
  # {{{
  def init
    puts "Creating effective pom..."
    # generate and load the effective pom and extract data from it so we don't need to parse it everytime
    unless @conf[:effective_pom].exist?
      puts "here"
      `(cd #{@conf[:project_root]}; mvn help:effective-pom -Doutput=#{@conf[:effective_pom]})`
    end
    namespaces = { 'xmlns' => 'http://maven.apache.org/POM/4.0.0' }
    epom = Nokogiri::XML(File.open(@conf[:effective_pom], 'r'))

    Project.new(@conf, epom)
  end
  #}}}

  # {{{
  def clean
    Pathname::glob(@conf[:clide_conf_dir] + '*').each { |file| file.delete }
    @conf[:clide_conf_dir].rmdir
    @conf[:cliderc].delete
  end
  #}}}

  # {{{
  def run(args)
    cmd = args.first
    case cmd
    when "init", "update"
      init
    when "clean"
      clean
    end
  end
  #}}}
end
#}}}

begin
  clide = Clide.new
  clide.run(ARGV)
  clide.save
rescue
  puts $!
  puts $!.backtrace
  puts "<print help doc here>"
end
