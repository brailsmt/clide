#!/usr/bin/env ruby
# vim: fdm=marker

require 'optparse'
require 'pp'

require_relative '../lib/pom'

# Top level command to manage a java project from the command line.
## This config stuff is great, but I need functionality before configuration.
## BEGIN CONFIG
#
#require_relative '../lib/clide_opts'
#require_relative '../lib/cliderc'
#
#OPTS = get_clide_options
#conf = nil
#begin
#  conf = ClideConfig.new OPTS, ClideConfig::find_project_root
#rescue Exception => e
#  $stderr.puts e.backtrace
#  exit unless ARGV[0] == 'init'
#end
#
###
## This is the first command that needs to run, so it cannot rely on configuration.
#def do_init
#  conf = ClideConfig.new OPTS, Dir.pwd
#  conf.save
#end
## END CONFIG

def grab_imports(pom, args = nil)
  pp pom.get_dependencies
end

def build_classpath(pom_fname, project)
  pom = POM.new pom_fname
  classpath = []
  deps[project].each { |dep|
    classpath << dep.get_path_to_dep
  }
  classpath.join ':'
end

#{{{
def register_command(name, fn)
  if $commands.has_key? name
    puts "A command for #{name} already exists!  Aborting!"
    puts "If you really want to override the #{name} command, use register_command!()."
    false
  else
    $commands[name] = fn
    true
  end
end
#}}}

def main
  command = ARGV.shift

  case command
  when 'jimp'
    grab_imports POM.find_parent_pom
  when 'gencp'
    build_classpath ARGV[0], ARGV[1]
  else
    puts "Not implemented yet!"
  end
end


main 
